AWSTemplateFormatVersion: 2010-09-09
Description: "Lacework AWS Control Tower Integration: Add the Lacework Cloud Security Platform for cloud-native threat detection, compliance, behavioral anomaly detection, and automated AWS security monitoring."
Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - Label:
          default: "Basic Configuration"
        Parameters:
          - LaceworkAccountName
          - LaceworkAccessKeyID
          - LaceworkSecretKey
          - StackSetName
          - CapabilityType
          - ExistingAccounts
          - KMSKeyIdentifierARN
          - LogAccountName
          - AuditAccountName
      - Label:
          default: "Advanced Configuration"
        Parameters:
          - S3BucketName
          - S3KeyPrefix
          - CTLogAccountTemplate
          - CTAuditAccountTemplate
          - CFGMemberAccountTemplate
    ParameterLabels:
      LaceworkAccountName:
        default: Lacework Account Name
      LaceworkAccessKeyID:
        default: Lacework Access Key ID
      LaceworkSecretKey:
        default: Lacework Secret Key
      StackSetName:
        default: StackSet Name
      CapabilityType:
        default: Capability Type
      ExistingAccounts:
        default: Monitor Existing Accounts
      LogAccountName:
        default: Log Account Name
      AuditAccountName:
        default: Audit Account Name
      KMSKeyIdentifierARN:
        default: KMS Key Identifier ARN for CloudTrail S3 Logs Decrypt
      S3BucketName:
        default: Cloudformation S3 Bucket
      S3KeyPrefix:
        default: Cloudformation S3 Key Prefix
      CTLogAccountTemplate:
        default: Log Account Cloudformation Template
      CTAuditAccountTemplate:
        default: Audit Account Cloudformation Template
      CFGMemberAccountTemplate:
        default: Member Account Cloudformation Template
Parameters:
  # basic
  LaceworkAccountName:
    Type: String
    Description: Your Lacework account name. ie. <account name>.lacework.net
    MinLength: '1'
    AllowedPattern: '^[a-zA-Z0-9]+(?:-[a-zA-Z0-9]+)*$'
    ConstraintDescription: Invalid Lacework account name. Account name may contain alphanumeric characters and dashes only.
  LaceworkAccessKeyID:
    Type: String
    NoEcho: true
    MinLength: '1'
    AllowedPattern: '^[a-zA-Z0-9_]*$'
    ConstraintDescription: Lacework API Access Key ID contains alphanumeric characters and symbols only.
    Description: Lacework API Secret Key ID. See https://support.lacework.com/hc/en-us/articles/360011403853-Generate-API-Access-Keys-and-Tokens
  LaceworkSecretKey:
    Type: String
    NoEcho: true
    MinLength: '1'
    AllowedPattern: '^[a-zA-Z0-9_]*$'
    ConstraintDescription: Lacework API Secret Key contains alphanumeric characters and symbols only.
    Description: Lacework API Secret Key. See https://support.lacework.com/hc/en-us/articles/360011403853-Generate-API-Access-Keys-and-Tokens
  StackSetName:
    Type: String
    Description: The name for the Lacework Control Tower StackSet
    MinLength: '1'
    Default: Lacework-CT
  CapabilityType:
    AllowedValues:
      - 'CloudTrail+Config'
      - 'Config'
    Type: String
    Default: CloudTrail+Config
    Description: The Lacework Control Tower StackSet type to use
  ExistingAccounts:
    Description: Choose to monitor any existing accounts. SUSPENDED accounts are skipped.
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
  LogAccountName:
    Type: String
    Description: Your AWS Control Tower log account name.
    MinLength: '1'
    AllowedPattern: '^[a-zA-Z0-9\s]*$'
    ConstraintDescription: Account name contains alphanumeric characters only.
    Default: "Log Archive"
  AuditAccountName:
    Type: String
    Description: Your AWS Control Tower audit account name.
    MinLength: '1'
    AllowedPattern: '^[a-zA-Z0-9\s]*$'
    ConstraintDescription: Account name contains alphanumeric characters only.
    Default: "Audit"
  KMSKeyIdentifierARN:
    Description: Provide the ARN of the KMS key for decrypting S3 log files decryption if necessary. Won't use KMS decrypt if no key provided.
    Default: ''
    Type: String
    MaxLength: '256'
# advanced
  S3BucketName:
    Type: String
    Default: lacework-alliances
    MinLength: '1'
    Description: "S3 bucket for Lacework Control Tower Cloudformation assets. Use this if you want to customize your deployment. The bucket name can include numbers, lowercase letters, uppercase letters, and hyphens, but it cannot start or end with hyphens (-)."
  S3KeyPrefix:
    Type: String
    Default: lacework-control-tower-cfn
    MinLength: '1'
    Description: "S3 key prefix for Lacework Control Tower Cloudformation assets directory. Use this if you want to customize your deployment. The prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slashes (/). For more information, see https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html."
  CTLogAccountTemplate:
    Type: String
    Default: lacework-aws-ct-log.template.yml
    MinLength: '1'
    Description: "Cloudformation template for the log account. Expected to be in a templates/ directory."
  CTAuditAccountTemplate:
    Type: String
    Default: lacework-aws-ct-audit.template.yml
    MinLength: '1'
    Description: "Cloudformation template for the audit account. Expected to be in a templates/ directory."
  CFGMemberAccountTemplate:
    Type: String
    Default: lacework-aws-cfg-member.template.yml
    MinLength: '1'
    Description: "Cloudformation template for a member account. Expected to be in a templates/ directory."
Resources:
  LambdaZipsBucket:
    Type: AWS::S3::Bucket

  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !Ref 'S3BucketName'
      Prefix: !Ref 'S3KeyPrefix'
      Objects:
        - '/lambda/LaceworkCTAuth.zip'
        - '/lambda/LaceworkCTSetup.zip'
        - '/lambda/LaceworkCTAccount.zip'

  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${S3BucketName}/${S3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:PutObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/${S3KeyPrefix}*'

  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from the S3 bucket to a new location.
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  LaceworkSetupFunction:
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join ['', [!Ref 'S3KeyPrefix', '/lambda/LaceworkCTSetup.zip']]
      Handler: setup.lambda_handler
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          stack_set_name: !Ref StackSetName
          lacework_account_name: !Ref LaceworkAccountName
          lacework_api_credentials: !Ref LaceworkApiCredentials
          lacework_account_sns: !Ref LaceworkAccountSNS
          capability_type: !Ref CapabilityType
          existing_accounts: !Ref ExistingAccounts
          log_account_name: !Ref LogAccountName
          log_account_template: !Sub "https://s3.amazonaws.com/${S3BucketName}/${S3KeyPrefix}/templates/${CTLogAccountTemplate}"
          audit_account_name: !Ref AuditAccountName
          audit_account_template: !Sub "https://s3.amazonaws.com/${S3BucketName}/${S3KeyPrefix}/templates/${CTAuditAccountTemplate}"
          member_account_template: !Sub "https://s3.amazonaws.com/${S3BucketName}/${S3KeyPrefix}/templates/${CFGMemberAccountTemplate}"
      Role: !GetAtt LaceworkSetupFunctionRole.Arn
  LaceworkSetupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Setup_Operations
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: AccountStatusCheck
            Effect: Allow
            Action:
              - organizations:DescribeAccount
            Resource:
              !Join [ '', [ 'arn:aws:organizations::', !Ref 'AWS::AccountId', ':account/', '*' ,'/','*'] ]
          - Sid: StackSetInstanceCreate
            Effect: Allow
            Action:
            - cloudformation:CreateStackInstances
            - cloudformation:ListStackInstances
            - organizations:DescribeAccount
            Resource:
              !Join ['', ['arn:aws:cloudformation:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':stackset/', '*' ]]
          - Sid: StackSetInstanceDelete
            Effect: Allow
            Action:
            - cloudformation:DeleteStackSet
            - cloudformation:DeleteStackInstances
            - cloudformation:DescribeStackSetOperation
            Resource:
              !Join ['', ['arn:aws:cloudformation:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':stackset/', '*' ]]
          - Sid: StackSetCreate
            Effect: Allow
            Action:
            - cloudformation:CreateStackSet
            - cloudformation:DescribeStackSet
            Resource:
              !Join ['', ['arn:aws:cloudformation:', '*', ':', '*', ':stackset/Lacework-*' ]]
          - Sid: S3Ops
            Effect: Allow
            Action:
            - s3:ListBucket
            - s3:GetObject
            Resource:
            - !Join ['',['arn:aws:s3:::', !Ref S3BucketName, '/', !Ref S3KeyPrefix, '*']]
          - Sid: SNSOps
            Effect: Allow
            Action:
            - sns:Publish
            Resource: !Ref LaceworkAccountSNS
          - Sid: PassRole
            Effect: Allow
            Action:
            - iam:PassRole
            Resource: !Join [':', ['arn:aws:iam:', !Ref 'AWS::AccountId', 'role/service-role/AWSControlTowerStackSetRole' ]]
          - Sid: SecretRead
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:UpdateSecret
            Resource:
              Ref: LaceworkApiCredentials
          - Sid: GetTrail
            Effect: Allow
            Action:
              - cloudtrail:GetTrail
            Resource: !Join ['', ['arn:aws:cloudtrail:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':trail/aws-controltower-BaselineCloudTrail' ]]
          - Sid: ListAccounts
            Effect: Allow
            Action:
              - organizations:ListAccounts
            Resource: '*'
      ManagedPolicyArns:
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  LaceworkApiCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Lacework API Access Keys
      Name: LaceworkApiCredentials
      SecretString:
        Fn::Join:
        - ''
        - - '{"AccessKeyID":"'
          - Ref: LaceworkAccessKeyID
          - '","SecretKey":"'
          - Ref: LaceworkSecretKey
          - '","AccessToken": "0"'
          - ',"TokenExpiry": 0 }'

  LaceworkSetup: # this will launch the setup function and process the initial accounts. appropriate methods are called via crhelper in the function.
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - LaceworkAccountSNSSubscription
    Properties:
      ServiceToken:
        !GetAtt LaceworkSetupFunction.Arn

  LaceworkAccountSNS: # publishing to this SNS topic will trigger the stackset function. this function is called for each new account
    Type: AWS::SNS::Topic

  LaceworkAccountSNSLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LaceworkAccountFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref LaceworkAccountSNS

  LaceworkAccountSNSSubscription: # stackset function subscribes to new SNS messages
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt LaceworkAccountFunction.Arn
      Protocol: lambda
      TopicArn: !Ref LaceworkAccountSNS

  LaceworkDLQ: # dead letter queue
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600

  LaceworkAccountFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Account_Operations
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: StackSetInstanceOperations
            Effect: Allow
            Action:
            - cloudformation:CreateStackInstances
            - cloudformation:ListStackInstances
            - cloudformation:ListStackSetOperations
            - cloudformation:DescribeStackSetOperation
            - cloudformation:DeleteStackInstances
            Resource:
              !Join ['', ['arn:aws:cloudformation:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':stackset/',  !Ref StackSetName, '*' ]]
          - Sid: StackSetOperations
            Effect: Allow
            Action:
            - cloudformation:DescribeStackSet
            Resource:
              !Join ['', ['arn:aws:cloudformation:', '*', ':', '*', ':stackset/Lacework-*' ]]
          - Sid: SNSOps
            Effect: Allow
            Action:
            - sns:Publish
            Resource:
            - !Ref LaceworkAccountSNS
          - Sid: SecretRead
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              Ref: LaceworkApiCredentials
      ManagedPolicyArns:
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  LaceworkAccountFunction: # the account function deploys the stackset cloudformation template that allows lacework to get cross account access to read AWS audit logs and config
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join ['', [!Ref 'S3KeyPrefix', '/lambda/LaceworkCTAccount.zip']]
      Handler: account.lambda_handler
      Runtime: python3.7
      Timeout: 120
      Environment:
        Variables:
          stack_set_name: !Ref StackSetName
          lacework_account_sns: !Ref LaceworkAccountSNS
          lacework_api_credentials: !Ref LaceworkApiCredentials
      Role: !GetAtt LaceworkAccountFunctionRole.Arn

  LaceworkAuthFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Auth_Operations
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Sid: SecretReadUpdate
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - secretsmanager:UpdateSecret
              Resource:
                Ref: LaceworkApiCredentials
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  LaceworkAuthFunction: # the auth function calls the lacework rest api to refresh an access token
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join ['', [!Ref 'S3KeyPrefix', '/lambda/LaceworkCTAuth.zip']]
      Handler: auth.lambda_handler
      Runtime: python3.7
      Timeout: 120
      Environment:
        Variables:
          lacework_account_name: !Ref LaceworkAccountName
          lacework_api_credentials: !Ref LaceworkApiCredentials
      Role: !GetAtt LaceworkAuthFunctionRole.Arn

  LaceworkAuthFunctionScheduleEvents:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: cron(0 */2 * * ? *)
      Targets:
        - Arn: !GetAtt "LaceworkAuthFunction.Arn"
          Id: IDLaceworkAuthFunctionScheduleEvents

  LaceworkAuthFunctionSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "LaceworkAuthFunction.Arn"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "LaceworkAuthFunctionScheduleEvents.Arn"

  LaceworkControlTowerEvents: # this event rule listens to AWS control tower lifecycle events and triggers the stackset function
    Type: AWS::Events::Rule
    Properties:
      Description: Captures AWS Control Tower LifeCycle events and invokes additional functions.
      EventPattern:
        detail:
          eventName:
          - CreateManagedAccount
          - UpdateManagedAccount
          eventSource:
          - controltower.amazonaws.com
        detail-type:
        - AWS Service Event via CloudTrail
        source:
        - aws.controltower
      Name: LaceworkControlTowerEvents
      State: ENABLED
      Targets:
      - Arn: !GetAtt "LaceworkAccountFunction.Arn"
        Id: IDLaceworkControlTowerEvents

  LaceworkControlTowerLifeCyclePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "LaceworkAccountFunction.Arn"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "LaceworkControlTowerEvents.Arn"