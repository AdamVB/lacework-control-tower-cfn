AWSTemplateFormatVersion: 2010-09-09
Description: "Lacework AWS Control Tower Integration: Add the Lacework Cloud Security Platform for cloud-native threat detection, compliance, behavioral anomaly detection, and automated AWS security monitoring."
Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - Label:
          default: "Basic Configuration"
        Parameters:
          - LaceworkAccountName
          - LaceworkAccessKeyID
          - LaceworkSecretKey
          - LaunchAccountList
          - StackSetName
          - StackSetType
      - Label:
          default: "Advanced Configuration"
        Parameters:
          - CreateTrail
          - NewTrailLogFilePrefix
          - ExistingTrailS3BucketName
          - ExistingTrailTopicArn
          - StackSetUrl
          - CTS3BucketName
          - CTS3KeyPrefix
    ParameterLabels:
      LaceworkAccountName:
        default: Lacework Account Name
      LaceworkAccessKeyID:
        default: Lacework Access Key ID
      LaceworkSecretKey:
        default: Lacework Secret Key
      LaunchAccountList:
        default: Existing AWS Account ID List
      StackSetName:
        default: StackSet Name
      StackSetType:
        default: StackSet Type
      CreateTrail:
        default: Create New CloudTrail?
      NewTrailLogFilePrefix:
        default: CloudTrail Log Prefix
      ExistingTrailS3BucketName:
        default: Existing CloudTrail S3 Bucket
      ExistingTrailTopicArn:
        default: Existing CloudTrail Topic Arn
      StackSetUrl:
        default: Custom StackSet Type S3 Template URL
      CTS3BucketName:
        default: Custom Cloudformation S3 Bucket
      CTS3KeyPrefix:
        default: Custom Cloudformation S3 Key Prefix
Parameters:
  # basic
  LaceworkAccountName:
    Type: String
    Description: Your Lacework account name. ie. <account name>.lacework.net
    AllowedPattern: '^[a-zA-Z0-9_]*$'
    ConstraintDescription: Lacework account name contains alphanumeric characters only
  LaceworkAccessKeyID:
    Type: String
    NoEcho: true
    AllowedPattern: '^[a-zA-Z0-9_]*$'
    ConstraintDescription: Lacework API Access Key ID contains alphanumeric characters and symbols only
    Description: Lacework API Secret Key ID. See https://support.lacework.com/hc/en-us/articles/360011403853-Generate-API-Access-Keys-and-Tokens
  LaceworkSecretKey:
    Type: String
    NoEcho: true
    AllowedPattern: '^[a-zA-Z0-9_]*$'
    ConstraintDescription: Lacework API Secret Key contains alphanumeric characters and symbols only
    Description: Lacework API Secret Key. See https://support.lacework.com/hc/en-us/articles/360011403853-Generate-API-Access-Keys-and-Tokens
  LaunchAccountList:
    Type: String
    Description: Comma separated string of existing (enrolled with Control Tower) AWS account IDs that you wish to monitor with Lacework. See https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html
    AllowedPattern: '^$|^(([0-9]){12},)*(([0-9]){12})$'
    ConstraintDescription: Must be either empty or a comma separated string of AWS account IDs (12 digit number) with no spaces
  StackSetName:
    Type: String
    Description: The name for the Lacework Control Tower StackSet
    Default: Lacework-Control-Tower-StackSet
  StackSetType:
    AllowedValues:
      - 'Config'
      - 'CloudTrail+Config'
      - 'Custom'
    Type: String
    Default: CloudTrail+Config
    Description: The Lacework Control Tower StackSet type to use
  # Advanced
  CreateTrail:
    Description: >-
      You can have a new multi-region CloudTrail be created (along with a
      new S3 bucket and SNS topic). Or use your existing CloudTrail setup and specify the existing S3 bucket and SNS topic.
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
  NewTrailLogFilePrefix:
    Description: >-
      If you want the new trail to prefix its log file names, provide the prefix
      to use.  Otherwise, leave it blank.
    Default: ''
    Type: String
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z0-9-_.!()* ]*'
    ConstraintDescription: 'Invalid log file prefix.  Must match pattern [a-zA-Z0-9-_.!()* ]*'
  ExistingTrailS3BucketName:
    Description: >-
      Provide the name of the S3 bucket for your existing trail setup.  The
      bucket must be owned by the current account.
    Default: ''
    Type: String
    MaxLength: '128'
  ExistingTrailTopicArn:
    Description: Provide the ARN of the SNS topic for your existing trail setup.
    Default: ''
    Type: String
    MaxLength: '256'
  StackSetUrl:
    Type: String
    Default: https://lacework-alliances.s3.us-west-2.amazonaws.com/lacework-control-tower-cfn/templates/lacework-aws-ct-cfg.template.yml
    Description: If you selected the Custom StackSet Type, enter the custom template URL here.
  CTS3BucketName:
    Type: String
    Default: lacework-alliances
    Description: "S3 bucket for Lacework Control Tower Cloudformation assets. Use this if you want to customize your deployment. The bucket name can include numbers, lowercase letters, uppercase letters, and hyphens, but it cannot start or end with hyphens (-)."
  CTS3KeyPrefix:
    Type: String
    Default: lacework-control-tower-cfn/
    Description: "S3 key prefix for Lacework Control Tower Cloudformation assets directory. Use this if you want to customize your deployment. The prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slashes (/). For more information, see https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html."
Conditions:
  UseConfigAndCloudTrailStackSet: !Equals
    - !Ref StackSetType
    - 'CloudTrail+Config'
  UseConfigOnlyStackSet: !Equals
    - !Ref StackSetType
    - 'Config'
  UseCustomStackSet: !Equals
    - !Ref StackSetType
    - 'Custom'
Resources:
  LambdaZipsBucket:
    Type: AWS::S3::Bucket

  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !Ref 'CTS3BucketName'
      Prefix: !Ref 'CTS3KeyPrefix'
      Objects:
        - 'lambda/LaceworkCTAuth.zip'
        - 'lambda/LaceworkCTSetup.zip'
        - 'lambda/LaceworkCTAccount.zip'
        - 'lambda/LaceworkCTStackSet.zip'

  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${CTS3BucketName}/${CTS3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:PutObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/${CTS3KeyPrefix}*'

  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from the S3 bucket to a new location.
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  LaceworkSetupFunction:
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join ['', [!Ref 'CTS3KeyPrefix', 'lambda/LaceworkCTSetup.zip']]
      Handler: setup.lambda_handler
      Runtime: python3.7
      Timeout: 120
      Environment:
        Variables:
          stack_set_name: !Ref StackSetName
          lacework_account_name: !Ref LaceworkAccountName
          account_list: !Ref LaunchAccountList
          stack_set_url: !If
            - UseConfigAndCloudTrailStackSet
            - 'https://lacework-alliances.s3.us-west-2.amazonaws.com/lacework-control-tower-cfn/templates/lacework-aws-ct-cfg.template.yml'
            - !If
              - UseConfigOnlyStackSet
              - 'https://lacework-alliances.s3.us-west-2.amazonaws.com/lacework-control-tower-cfn/templates/lacework-aws-cfg.template.yml'
              - !If
                - UseCustomStackSet
                - !Ref StackSetUrl
                - !Ref AWS::NoValue
          lacework_api_credentials: !Ref LaceworkApiCredentials
          lacework_stack_set_sns: !Ref LaceworkStackSetSNS
          create_trail: !Ref CreateTrail
          trail_log_prefix: !Ref NewTrailLogFilePrefix
          existing_trail_s3_bucket_name: !Ref ExistingTrailS3BucketName
          existing_trail_topic_arn: !Ref ExistingTrailTopicArn
      Role: !GetAtt LaceworkSetupFunctionRole.Arn

  LaceworkSetupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Setup_Operations
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: StackSetInstanceCreate
            Effect: Allow
            Action:
            - cloudformation:CreateStackInstances
            - cloudformation:ListStackInstances
            Resource:
              !Join ['', ['arn:aws:cloudformation:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':stackset/',  !Ref StackSetName, '*' ]]
          - Sid: StackSetInstanceDelete
            Effect: Allow
            Action:
            - cloudformation:DeleteStackSet
            - cloudformation:DeleteStackInstances
            - cloudformation:DescribeStackSetOperation
            Resource:
              !Join ['', ['arn:aws:cloudformation:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':stackset/',  !Ref StackSetName, '*' ]]
          - Sid: StackSetCreate
            Effect: Allow
            Action:
            - cloudformation:CreateStackSet
            - cloudformation:DescribeStackSet
            Resource:
              !Join ['', ['arn:aws:cloudformation:', '*', ':', '*', ':stackset/Lacework-*' ]]
          - Sid: S3Ops
            Effect: Allow
            Action:
            - s3:ListBucket
            - s3:GetObject
            Resource:
            - !Join ['',['arn:aws:s3:::', !Ref CTS3BucketName, '/', !Ref CTS3KeyPrefix, '*']]
          - Sid: SNSOps
            Effect: Allow
            Action:
            - sns:Publish
            Resource: !Ref LaceworkStackSetSNS
          - Sid: PassRole
            Effect: Allow
            Action:
            - iam:PassRole
            Resource: !Join [':', ['arn:aws:iam:', !Ref 'AWS::AccountId', 'role/service-role/AWSControlTowerStackSetRole' ]]
          - Sid: SecretRead
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:UpdateSecret
            Resource:
              Ref: LaceworkApiCredentials
      ManagedPolicyArns:
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  LaceworkApiCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Lacework API Access Keys
      Name: LaceworkApiCredentials
      SecretString:
        Fn::Join:
        - ''
        - - '{"AccessKeyID":"'
          - Ref: LaceworkAccessKeyID
          - '","SecretKey":"'
          - Ref: LaceworkSecretKey
          - '","AccessToken": "0"'
          - ',"TokenExpiry": 0 }'

  LaceworkSetup: # this will launch the setup function and process the initial accounts. appropriate methods are called via crhelper in the function.
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - LaceworkStackSetSNSSubscription
      - LaceworkAccountSNSSubscription
    Properties:
      ServiceToken:
        !GetAtt LaceworkSetupFunction.Arn

  LaceworkStackSetSNS: # publishing to this SNS topic will trigger the stackset function. this function is called for each new account
    Type: AWS::SNS::Topic

  LaceworkStackSetSNSLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LaceworkStackSetFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref LaceworkStackSetSNS

  LaceworkStackSetSNSSubscription: # stackset function subscribes to new SNS messages
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt LaceworkStackSetFunction.Arn
      Protocol: lambda
      TopicArn: !Ref LaceworkStackSetSNS

  LaceworkAccountSNS: # publishing to this SNS will trigger the account function. this function calls the lacework rest api to create new accounts in lacework
    Type: AWS::SNS::Topic

  LaceworkAccountSNSLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LaceworkAccountFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref LaceworkAccountSNS

  LaceworkAccountSNSSubscription: # account function subscribes to new SNS messages
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt LaceworkAccountFunction.Arn
      Protocol: lambda
      TopicArn: !Ref LaceworkAccountSNS

  LaceworkDLQ: # dead letter queue
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600

  LaceworkStackSetFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Account_Operations
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: StackSetInstanceOperations
            Effect: Allow
            Action:
            - cloudformation:CreateStackInstances
            - cloudformation:ListStackInstances
            - cloudformation:ListStackSetOperations
            - cloudformation:DescribeStackSetOperation
            - cloudformation:DeleteStackInstances
            Resource:
              !Join ['', ['arn:aws:cloudformation:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':stackset/',  !Ref StackSetName, '*' ]]
          - Sid: StackSetOperations
            Effect: Allow
            Action:
            - cloudformation:DescribeStackSet
            Resource:
              !Join ['', ['arn:aws:cloudformation:', '*', ':', '*', ':stackset/Lacework-*' ]]
          - Sid: SNSOps
            Effect: Allow
            Action:
            - sns:Publish
            Resource:
            - !Ref LaceworkStackSetSNS
            - !Ref LaceworkAccountSNS
          - Sid: SecretRead
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              Ref: LaceworkApiCredentials
      ManagedPolicyArns:
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  LaceworkStackSetFunction: # the stackset function deploys the stackset cloudformation template that allows lacework to get cross account access to read AWS audit logs and config
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join ['', [!Ref 'CTS3KeyPrefix', 'lambda/LaceworkCTStackSet.zip']]
      Handler: stackset.lambda_handler
      Runtime: python3.7
      Timeout: 120
      Environment:
        Variables:
          stack_set_name: !Ref StackSetName
          lacework_stack_set_sns: !Ref LaceworkStackSetSNS
          lacework_account_sns: !Ref LaceworkAccountSNS
          lacework_api_credentials: !Ref LaceworkApiCredentials
      Role: !GetAtt LaceworkStackSetFunctionRole.Arn

  LaceworkAccountFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Account_Operations
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: StackSetInstanceOperations
            Effect: Allow
            Action:
            - cloudformation:ListStackInstances
            - cloudformation:ListStackSetOperations
            - cloudformation:ListStackSetOperationResults
            - cloudformation:DescribeStackSetOperation
            Resource:
              !Join ['', ['arn:aws:cloudformation:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':stackset/',  !Ref StackSetName, '*' ]]
          - Sid: StackSetOperations
            Effect: Allow
            Action:
            - cloudformation:DescribeStackSet
            Resource:
              !Join ['', ['arn:aws:cloudformation:', '*', ':', '*', ':stackset/Lacework-*' ]]
          - Sid: SQSOps
            Effect: Allow
            Action:
            - sqs:SendMessage
            - sqs:DeleteMessage
            - sqs:ReceiveMessage
            - sqs:GetQueueAttributes
            Resource:
            - !GetAtt LaceworkDLQ.Arn
          - Sid: SNSOps
            Effect: Allow
            Action:
            - sns:Publish
            Resource:
            - !Ref LaceworkAccountSNS
          - Sid: SecretRead
            Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource:
              Ref: LaceworkApiCredentials
      ManagedPolicyArns:
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  LaceworkAccountFunction: # the account function calls the lacework rest api to create the AWS account references in lacework
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join ['', [!Ref 'CTS3KeyPrefix', 'lambda/LaceworkCTAccount.zip']]
      Handler: account.lambda_handler
      Runtime: python3.7
      Timeout: 120
      Environment:
        Variables:
          lacework_account_name: !Ref LaceworkAccountName
          lacework_api_credentials: !Ref LaceworkApiCredentials
          lacework_account_sns: !Ref LaceworkAccountSNS
          lacework_dlq: !Ref LaceworkDLQ
      Role: !GetAtt LaceworkAccountFunctionRole.Arn

  LaceworkAuthFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Auth_Operations
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Sid: SecretReadUpdate
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - secretsmanager:UpdateSecret
              Resource:
                Ref: LaceworkApiCredentials
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  LaceworkAuthFunction: # the auth function calls the lacework rest api to refresh an access token
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join ['', [!Ref 'CTS3KeyPrefix', 'lambda/LaceworkCTAuth.zip']]
      Handler: auth.lambda_handler
      Runtime: python3.7
      Timeout: 120
      Environment:
        Variables:
          lacework_account_name: !Ref LaceworkAccountName
          lacework_api_credentials: !Ref LaceworkApiCredentials
      Role: !GetAtt LaceworkAuthFunctionRole.Arn

  LaceworkAuthFunctionScheduleEvents:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: cron(* 1/6 * * ? *)
      Targets:
        - Arn: !GetAtt "LaceworkAuthFunction.Arn"
          Id: IDLaceworkAuthFunctionScheduleEvents

  LaceworkAuthFunctionSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "LaceworkAuthFunction.Arn"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "LaceworkAuthFunctionScheduleEvents.Arn"

  LaceworkControlTowerEvents: # this event rule listens to AWS control tower lifecycle events and triggers the stackset function
    Type: AWS::Events::Rule
    Properties:
      Description: Captures AWS Control Tower LifeCycle events and invokes additional functions.
      EventPattern:
        detail:
          eventName:
          - CreateManagedAccount
          - UpdateManagedAccount
        detail-type:
        - AWS Service Event via CloudTrail
        source:
        - lacework.controltower # aws.controltower
      Name: LaceworkControlTowerEvents
      State: ENABLED
      Targets:
      - Arn: !GetAtt "LaceworkStackSetFunction.Arn"
        Id: IDLaceworkControlTowerEvents

  LaceworkControlTowerLifeCyclePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "LaceworkStackSetFunction.Arn"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "LaceworkControlTowerEvents.Arn"